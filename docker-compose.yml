version: '3.8'

services:
  # MongoDB service
  mongo:
    image: mongo:latest
    container_name: rehearsal-scheduler-mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-rehearsal-scheduler}
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: rehearsal-scheduler-backend
    restart: always
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${API_PORT:-5000}
      - MONGODB_URI=mongodb://${MONGO_ROOT_USER:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongo:27017/${MONGO_DB:-rehearsal-scheduler}?authSource=admin
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key}
      - JWT_EXPIRE=${JWT_EXPIRE:-30d}
      - CLIENT_URL=${CLIENT_URL:-http://localhost:3000}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
    ports:
      - "${API_PORT:-5000}:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - app-network
    command: npm run dev

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: rehearsal-scheduler-frontend
    restart: always
    depends_on:
      - backend
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:5000/api}
    ports:
      - "${CLIENT_PORT:-3000}:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - app-network
    command: npm start

# Persistent volumes
volumes:
  mongo-data:
    driver: local

# Docker networks
networks:
  app-network:
    driver: bridge